#!/usr/bin/env python3
# tool to convert VSPaero CL and CD output to tables for JSBSim

import json
import sys


def dprint(t, msg=''):
    if DEBUG:
        if msg != '':
            print(msg)
        print(t)


def smallNumberCheck(f):
    if 'e' in str(f):
        return 0.0
    else:
        return f


with open('./runparams.json', 'r') as p:
    params = json.loads(p.read())

od = open('./output/outputData.json', 'w+')

of = open(params['output_file'], 'w+')
stab_file = open(params['stab_file'] + 'A-6_DegenGeom.stab', 'r')

input_base = params['base_file']
input_files = params['files']

wake_iterations = 3

data_order = ['Mach', 'AoA', 'beta', 'CL', 'CDo', 'CDi', 'CDtot', 'CS',
              'L/D', 'E', 'CFx', 'CFz', 'CFy', 'CMx', 'CMy', 'CMz', 'T/QS']
input_txt_base = open(input_base + 'A-6_DegenGeom.history', 'r').readlines()
input_txt = {}

for arg in sys.argv:
    if '--debug' in arg:
        DEBUG = True
    else:
        DEBUG = False
    if arg.startswith('-w'):
        wake_iterations = arg[2:]

for f in input_files.keys():
    input_txt[f] = {}
    for c in input_files[f]:
        name = c.split('/')[len(c.split('/')) - 2]
        input_txt[f][name] = open(c + 'A-6_DegenGeom.history', 'r').readlines()

db = {'base': {0: []}}
for i in range(len(input_txt_base)):
    if input_txt_base[i].startswith('Solver Case:'):
        l = i + 2 + wake_iterations
        dprint(input_txt_base[l])
        t = input_txt_base[l].split(' ')
        while '' in t:
            t.remove('')
        t.remove(t[0])
        t[len(t) - 1] = t[len(t) - 1][:-1]
        dataset = {}
        for n in range(0, len(t)):
            data_name = data_order[n]
            dataset[data_name] = t[n]
        db['base'][0].append(dataset)

for s in input_txt.keys():
    db[s] = {}
    for p in input_txt[s].keys():
        db[s][p] = []
        for i in range(len(input_txt[s][p])):
            if input_txt[s][p][i].startswith('Solver Case:'):
                l = i + 2 + wake_iterations
                # print(s, p, l)
                # print(input_txt[s][p][l])
                t = input_txt[s][p][l].split(' ')
                while '' in t:
                    t.remove('')
                t.remove(t[0])
                t[len(t) - 1] = t[len(t) - 1][:-1]
                dataset = {}
                for n in range(0, len(t)):
                    data_name = data_order[n]
                    dataset[data_name] = t[n]
                db[s][p].append(dataset)

with open('./output/dataset.json', 'w+') as jf:
    jf.write(json.dumps(db, sort_keys=True, indent=4))

outputData = {'CL': {}, 'CDtot': {}, 'CS': {}, 'CMx': {}, 'CMy': {}, 'CMz': {}}
for o in outputData.keys():
    outputData[o]['base'] = {}
    outputData[o]['base'][0] = {}
    for r in input_txt.keys():
        outputData[o][r] = {}
        for p in input_txt[r].keys():
            outputData[o][r][p] = {}
            
# format: ouputData[datapoint][surface]{position}[beta][mach][AoA]
#         db[surface][position][datapoint]

desc = '''Generated by vsp2jsbsim.py
Author: JÃ¼ttner Domokos\n'''
of.write('<!--\n')
of.write(desc)
of.write('-->\n')
of.write('<aerodynamics>\n\n')
of.write('  <function name="aero/beta-deg-abs">\n')
of.write('    <description>Beta absolute value</description>\n')
of.write('    <abs>\n')
of.write('      <property>aero/beta-deg</property>\n')
of.write('    </abs>\n')
of.write('  </function>\n')
of.write('\n')
of.write('  <function name="aero/pb">\n')
of.write('    <description>PB Denormalization</description>\n')
of.write('    <product>\n')
of.write('      <property>aero/bi2vel</property>\n')
of.write('      <property>velocities/p-aero-rad_sec</property>\n')
of.write('    </product>\n')
of.write('  </function>\n')
of.write('\n')
of.write('  <function name="aero/qb">\n')
of.write('    <description>For denormalization</description>\n')
of.write('    <product>\n')
of.write('      <property>aero/ci2vel</property>\n')
of.write('      <property>velocities/q-aero-rad_sec</property>\n')
of.write('    </product>\n')
of.write('  </function>\n')
of.write('\n')
of.write('  <function name="aero/rb">\n')
of.write('    <description>For denormalization</description>\n')
of.write('    <product>\n')
of.write('      <property>aero/bi2vel</property>\n')
of.write('      <property>velocities/r-aero-rad_sec</property>\n')
of.write('    </product>\n')
of.write('\n')
of.write('  </function>\n')


for datapoint in outputData.keys():
    print('#####', datapoint)
    of.write('  <!-- ' + datapoint.upper() + ' -->\n')
    for run in outputData[datapoint].keys():
        print('-', run)
        of.write('  <!-- ' + run + ' -->\n')
        for pos in outputData[datapoint][run].keys():
            betas = []
            for d in db[run][pos]:
                if d['beta'] not in betas:
                    betas.append(d['beta'])

            for d in db[run][pos]:
                bv = smallNumberCheck(float("%.5f" % float(d[datapoint])))
                try:
                    if len(str(bv).split('.')[1]) < 5:
                        bv = str(bv) + '0' * (5 - len(str(bv).split('.')[1]))
                except IndexError:
                    pass
                if run != 'base':
                    # print(d['beta'], d['Mach'], d['AoA'])
                    basedict = outputData[datapoint]['base'][0]
                    baseValue = smallNumberCheck(float(basedict[d['beta']]
                                                       [d['Mach']][d['AoA']]))
                    v = smallNumberCheck(float("%.5f" %
                                               (float(bv) - baseValue)))
                    try:
                        if not str(v).startswith('-'):
                            v = ' ' + str(v)
                        if len(str(v).split('.')[1]) < 5:
                            v = str(v) + '0' * (5 - len(str(v).split('.')[1]))
                    except IndexError:
                        pass

                if not str(bv).startswith('-'):
                    bv = ' ' + str(bv)
                try:
                    if run == 'base':
                        outputData[datapoint][run][pos][d['beta']][d['Mach']][d['AoA']] = bv
                    else:
                        outputData[datapoint][run][pos][d['beta']][d['Mach']][d['AoA']] = v
                    od.write(json.dumps(outputData, sort_keys=True, indent=4))
                except KeyError:
                    try:
                        outputData[datapoint][run][pos][d['beta']][d['Mach']] = {}
                        if run == 'base':
                            outputData[datapoint][run][pos][d['beta']][d['Mach']][d['AoA']] = bv
                        else:
                            outputData[datapoint][run][pos][d['beta']][d['Mach']][d['AoA']] = v
                        od.write(json.dumps(outputData, sort_keys=True, indent=4))
                    except KeyError:
                        outputData[datapoint][run][pos][d['beta']] = {}
                        outputData[datapoint][run][pos][d['beta']][d['Mach']] = {}
                        if run == 'base':
                            outputData[datapoint][run][pos][d['beta']][d['Mach']][d['AoA']] = bv
                        else:
                            outputData[datapoint][run][pos][d['beta']][d['Mach']][d['AoA']] = v
                        od.write(json.dumps(outputData, sort_keys=True, indent=4))

            if run != 'base':
                of.write('  <function name="aero/' + datapoint + '_' + run + '_' + str(pos) + '">\n')
            else:
                of.write('  <function name="aero/' + datapoint + '_' + run + '">\n')
            of.write('    <table>\n')
            of.write('      <independentVar lookup="row">velocities/mach</independentVar>\n')
            of.write('      <independentVar lookup="column">aero/alpha-deg</independentVar>\n')
            of.write('      <independentVar lookup="table">aero/beta-deg</independentVar>\n')
            for b in outputData[datapoint][run][pos].keys():
                of.write('      <tableData breakPoint="' + str(b) + '">\n')
                txt_CL = '                '
                machs = []
                aoa = []
                for m in outputData[datapoint][run][pos][b].keys():
                    if m not in machs:
                        machs.append(m)
                        for a in outputData[datapoint][run][pos][b][m].keys():
                            a = str(a)
                            if len(a.split('.')[0]) < 3:
                                a = ' ' * (3 - len(a.split('.')[0])) + a
                            if len(a) < 6:
                                a += ' ' * (6 - len(a))
                            if a not in aoa:
                                txt_CL += a[:-3] + '    '
                                aoa.append(a)
                        # print(aoa)
                txt_CL = txt_CL[:-1] + '\n'
            
                for m in outputData[datapoint][run][pos][b].keys():
                    line = '        ' + str(m) + '  '
                    for c in outputData[datapoint][run][pos][b][m].values():
                        line += str(c) + '  '
                    txt_CL += line[:-2] + '\n'
            
                of.write(txt_CL[:-1] + '\n')
                of.write('      </tableData>\n\n')
            of.write('    </table>\n')
            of.write('  </function>\n\n')

            with open('./outputData.json', 'w+') as jf:
                jf.write(json.dumps(outputData, sort_keys=True, indent=4))

        # interpolate them
        if run != 'base':
            of.write('  <function name="aero/' + datapoint + '_' + run + '">\n')
            of.write('    <interpolate1d>\n')
            of.write('      <property>fcs/surfaces/' + run + '-pos-deg</property>\n')
            lastDeg = None
            degList = [float(f) for f in outputData[datapoint][run].keys()]
            degList_unsorted = degList
            degList.sort()
            for deg in degList:
                if deg % 1 == 0:
                    deg = int(deg)
                if (lastDeg is None or lastDeg < 0) and deg > 0:
                    of.write('      <value>0</value> <value>0</value>\n')
                of.write('      <value>' + str(deg) + '</value> <property>aero/' + datapoint + '_' + run + '_' + str(deg) + '</property>\n')
                lastDeg = deg
            if lastDeg < 0:
                of.write('      <value>0</value> <value>0</value>\n')
            of.write('    </interpolate1d>\n')
            of.write('  </function>\n\n')

# Stability - pretty much copypase of pinto's stab_format.py
print('##### stability')
data = []

mach = -9999
alpha = -9999
beta = -9999
cmlp = -9999
cmlr = -9999
cmma = -9999
cmmb = -9999
cmmq = -9999
cmnb = -9999
cmnr = -9999
cmnp = -9999
cfyp = -9999
cfyr = -9999

line = stab_file.readline()

def getdata(line):
    while '  ' in line:
        line = line.replace('  ', ' ')
    return line.split(' ')

while line != "":
    # print(line)
    line_arr = getdata(line)
    # gather main info
    if line[0:5] == "Mach_":
        mach = float(line[21:33])
    elif line[0:4] == "AoA_":
        alpha = float(line[21:33])
    elif line[0:5] == "Beta_":
        beta = float(line[21:33])

    # gather coefficient info
    elif line[0:3] == "CMx":
        cmlp = float(line_arr[4])  # wrt p per rad colum
        cmlr = float(line_arr[6])  # wrt r per rad column
    elif line[0:3] == "CMy":
        cmma = float(line_arr[2])
        cmmb = float(line_arr[3])
        cmmq = float(line_arr[5])
    elif line[0:3] == "CMz":
        cmnb = float(line_arr[3])
        cmnr = float(line_arr[4])
        cmnp = float(line_arr[6])
    elif line[0:2] == "CS":
        cfyp = float(line_arr[4])
        cfyr = float(line_arr[6])

    # output data

    elif line[0:8] == "# Result":
        data.append({'mach' : mach,
                     'alpha' : alpha,
                     'beta' : beta,
                     'cmlp' : cmlp,
                     'cmlr' : cmlr,
                     'cmma' : cmma,
                     'cmmb' : cmmb,
                     'cmmq' : cmmq,
                     'cmnb' : cmnb,
                     'cmnr' : cmnr,
                     'cmnp' : cmnp,
                     'cfyp' : cfyp,
                     'cfyr' : cfyr,
                     })

        # reinit values
        mach = -9999
        alpha = -9999
        beta = -9999
        cmlp = -9999
        cmlr = -9999
        cmma = -9999
        cmmb = -9999
        cmmq = -9999
        cmnb = -9999
        cmnr = -9999
        cmnp = -9999
        cfyp = -9999
        cfyr = -9999

    line = stab_file.readline()

stab_file.close()

# build an array of mach, alpha, and beta values
mach_arr = []
alpha_arr = []
beta_arr = []

false = 0
true = 1

for i in data:
    match = false

    for j in mach_arr:
        if j == i['mach']:
            match = true
    if not match:
        mach_arr.append(i['mach'])
    match = false

    for j in alpha_arr:
        if j == i['alpha']:
            match = true
    if not match:
        alpha_arr.append(i['alpha'])
    match = false

    for j in beta_arr:
        if j == i['beta']:
            match = true
            break
    if not match:
        beta_arr.append(i['beta'])
    match = false

output_coeffs = {
    # not included are: cmmb, cmnb
    'cmlp': ['Roll damping derivative', 'aero/pb'],
    'cmlr': ['Roll moment due to yaw rate', 'aero/rb'],
    'cmmq': ['Pitch damping derivative', 'aero/qb'],
    'cmma': ['Pitch moment alpha dot', 'aero/alphadot-rad_sec'],
    'cmnp': ['Yaw moment due to roll rate', 'aero/pb'],
    'cmnr': ['Yaw damping derivative', 'aero/rb'],
    'cfyp': ['Side force due to roll rate', 'aero/pb'],
    'cfyr': ['Side force due to yaw rate', 'aero/rb'],
}

# of.write('<?xml version="1.0"?>\n\n')

for coeff in output_coeffs:
    dprint(coeff)
    of.write('  <function name="aero/s/' + coeff + '">\n')
    of.write('    <description>' + output_coeffs[coeff][0] + '</description>\n')
    of.write('    <product>\n')
    of.write('      <property>' + output_coeffs[coeff][1] + '</property>\n')
    of.write('      <table>\n')
    of.write('        <independentVar lookup="row">velocities/mach</independentVar>\n')
    of.write('        <independentVar lookup="column">aero/alpha-deg</independentVar>\n')
    of.write('        <independentVar lookup="table">aero/beta-deg</independentVar>\n')
    of.write('        <tableData breakPoint="' + str(data[0]['beta']) + '">\n')
    of.write('                   ')
    for a in alpha_arr:
        a = str(a)
        if len(a.split('.')[0]) < 3:
            a = ' ' * (3 - len(a.split('.')[0])) + a
        of.write(str(a) + '       ')
    of.write('\n')
    of.write('           ')
    mp = str(data[0]['mach'])
    if not mp.startswith('-'):
        mp = ' ' + mp
    if len(mp.split('.')[1]) < 4:
        mp += ' ' * (4 - len(mp.split('.')[1]))
    of.write(mp)

    b_beta = data[0]['beta']
    b_mach = data[0]['mach']

    for i in data:

        if b_beta != i['beta']:
            b_beta = i['beta']
            of.write('\n        </tableData>\n')
            of.write('        <tableData breakPoint="' + str(i['beta']) + '">\n')
            of.write('                   ')
            for a in alpha_arr:
                a = str(a)
                if len(a.split('.')[0]) < 3:
                    a = ' ' * (3 - len(a.split('.')[0])) + a
                of.write(str(a) + '       ')

        if b_mach != i['mach']:
            b_mach = i['mach']
            of.write('\n           ')
            mp = str(i['mach'])
            if not mp.startswith('-'):
                mp = ' ' + mp
            if len(mp.split('.')[1]) < 4:
                mp += ' ' * (4 - len(mp.split('.')[1]))
            of.write(mp)

        cf = str(i[coeff])
        if not cf.startswith('-'):
            cf = ' ' + cf
        if len(cf.split('.')[1]) < 7:
            cf += '0' * (7 - len(cf.split('.')[1]))
        of.write('  ' + cf)

    of.write('\n        </tableData>\n')
    of.write('      </table>\n')
    of.write('    </product>\n')
    of.write('  </function>\n\n')

outputitems = {'forces': {'lift': 'CL', 'drag': 'CDtot', 'side': 'CS'},
               'moments': {'pitch': 'CMy', 'roll': 'CMx', 'yaw': 'CMz'}}

# AXIS definitions
# for g in outputitems.keys():
#     for o in outputitems[g].keys():
#         of.write('  <axis name="' + o.upper() + '">\n')
#         of.write('    <function name="aero/' + g + '/' + o + '">\n')
#         of.write('      <product>\n')
#         of.write('         <property>aero/qbar-psf</property>\n')
#         of.write('         <property>metrics/Sw-sqft</property>\n')
        
#         if g == 'moments':
#             if o == 'pitch' or o == 'roll':
#                 of.write('         <property>metrics/bw-ft</property>\n')
#             elif o == 'yaw':
#                 of.write('         <property>metrics/cbarw-ft</property>\n')
                
#         of.write('         <sum>\n')
#         for r in outputData[outputitems[g][o]].keys():
#             of.write('           <property>aero/' + outputitems[g][o] + '_' + r + '</property>\n')
#         if g == 'moments':
#             if o == 'pitch':
#                 of.write('           <property>aero/s/cmmq</property>\n')
#             # elif o == 'roll':
#             elif False:
#                 of.write('           <property>aero/s/cmlp</property>\n')
#                 of.write('           <property>aero/s/cmlr</property>\n')
#             elif o == 'yaw':
#                 of.write('           <property>aero/s/cmnp</property>\n')
#                 of.write('           <property>aero/s/cmnr</property>\n')
#         elif g == 'force' and o == 'side':
#             of.write('           <property>aero/s/cfyp</property>\n')
#             of.write('           <property>aero/s/cfyr</property>\n')
                
#         of.write('        </sum>\n')
#         of.write('      </product>\n')
#         of.write('    </function>\n')
#         of.write('  </axis>\n\n')

with open(params['axis_file'], 'r') as axis:
    for l in axis.readlines():
        of.write(l)
of.close()
od.close()
